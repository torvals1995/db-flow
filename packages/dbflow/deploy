#!/usr/bin/env bash

#
# Read PIPED JSON
#
read conf
# echo "input: $conf"

#
# Log <msg>.
#

log() {
  echo "  ○ $@"
}

config_get() {
  local key=$1
  echo $(expr "$conf" : '.*"'$key'":"\([^"]*\)"')
}

ssh_command() {
  local user="`config_get user`"
  if test -n "$user"; then
      local url="$user@`config_get host`"
  else
      local url="`config_get host`"
  fi
  echo "ssh $url"
}

#
# Run the given remote <cmd>.
#

runRemote() {
  local shell="`ssh_command`"
  # echo $shell "\"$@\"" >> $LOG
  echo Log: $shell "\"$@\""
  $shell $@
}

#
# Run the given <cmd> either locally or remotely
#
run() {
  local host="`config_get host`"
  if [[ $host == localhost ]]
  then
    runLocal $@
  else
    runRemote $@
  fi
}
#
# Run setup.
#
setup() {
  # 目录地址
  local path=`config_get path`
  # 仓库地址
  local repo=`config_get codeRepo`
  # 代码分支
  local ref=`config_get ref`
  # fetch速度
  local fetch=`config_get fetch`
  # 代码分支
  local branch=${ref#*/}

  # hook_pre_setup || abort pre-setup hook failed
  run "mkdir -p $path/{shared/{logs,pids},source}"
  test $? -eq 0 || abort setup paths failed
  log running setup
  log cloning $repo
  if test "$fetch" != "fast"; then
    log "full fetch"
    run "git clone --branch $branch $repo $path/source"
  else
    log "fast fetch"
    run "git clone --depth=5 --branch $branch $repo $path/source"
  fi
  test $? -eq 0 || abort failed to clone
  # run "ln -sfn $path/source $path/current"
  # test $? -eq 0 || abort symlink failed
  # hook post-setup || abort post-setup hook failed
  log setup complete
}

deploy() {
  # 代码分支
  local ref=$1
  local branch=$2

  if test -z "$branch"; then
    branch=${ref#*/}
  fi

  local path=`config_get path`
  local fetch=`config_get fetch`

  log "deploying ${ref}"
}

# parse argv
while test $# -ne 0; do
  arg=$1; shift
  echo "$arg"
  case $arg in
    setup)  setup $@; exit;;
  esac
done

deploy "${REF:-`config_get ref`}" "${BRANCH}"